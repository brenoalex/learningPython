Some exercises from beecrowd

Number 1858 - Theon's Answer
Ramsay: "(...) you win the game if you figure out who I am and why I'm torturing you."

Theon must think quickly and guess who his torturer is! However, Ramsey already decided what he will do after Theon gives his answer.

There are N people Theon may say the torturer is. Let us consider that the people are numbered from 1 to N. If Theon answers the torturer is person i, Ramsay will hit him Ti times.

You task is to help Theon and determine what he should answer in order to minimize the number of times he will be hit.

Input
The first line contains an integer N (1 ≤ N ≤ 100). The second line contains N integers T1, T2, ..., TN (0 ≤ Ti ≤ 20).

Output
Print a single line containing the number of the person Theon must say the torturer is. If there is more than one possible answer, print the smallest one.

Solution:
# -*- coding: utf-8 -*-

n = int(input())
t = input().split()

t = list(map(int,t))

print(t.index(min(t)) + 1)

Number - 2547 - Roller Coaster
Everyone in Nlogônia is really excited with the opening of Ricardo Barreiro World, the newest amusement park in the country. Its roller coaster, the fastest in the continent, is being widely advertised on TV and Radio. It’s the attraction everyone, from kids to grandmas, wants to ride.

Unfortunately, some restrictions were imposed by the government during the attraction’s homologation. For safety reasons, there is a minimum and a maximum height people must have to ride the roller coaster.

In the inauguration day, every guest filled a register in which they indicated their heights. In order to reduce lines and optimize the operation, you were hired to write a program that, given the number of guests, the minimum and maximum allowed height, and the height of every guest, determine how many guests are allowed to ride the roller coaster.

Input
The input contains several test cases. The first line of each test case contains three integers N (1 ≤ N ≤ 100), Amin and Amax (50 ≤ Amin ≤ Amax ≤ 250), the number of guests, the minimum and the maximum allowed height, respectively, in centimeters.

Each of the next N lines contains an integer (50 ≤ Ai ≤ 250), the height of the i-th guest, in centimeters.

The input ends with end-of-file (EOF).

Output
For each test case, print a single line containing the number of guests allowed to ride the roller coaster.

Solution:
while True:
  try:
    n, amin, amax = map(int,input().split())

    contador = 0
    for _ in range(n):
      altura = int(input())
      if amin <= altura <= amax:
        contador +=1

    print(contador)
  except EOFError:
    break

Number 2551 - New Record
The great Curitiban street marathon will occur in the next few days! Many athletes are training for the big day! Flávio is one of these athletes. He trains daily, hoping to be well placed in the marathon. He runs every morning on the streets near to his house.

His trainings are monitored by an app installed on his smartphone. After each training, Flávio knows both the duration and the distance he ran. With these information, he can determine his average speed in the training.

Flávio is really concerned about the evolution of his performance in his trainings, and, in particular, about the records of his average speed. Such record is beaten in some training when the average speed of that training is greater than all average speeds of the previous trainings. Help Flávio to determine in which trainings he beat his record.

Input
The input contains several test cases. The first line of each test case contains an integer N (1 ≤ N ≤ 30), the number of trainings. Consider that the trainings were done in days 1, 2,...,N. The next N lines describe the trainings. Line i (1 ≤ i ≤ N) contains two integers Ti and Di (1 ≤ Ti, Di ≤ 100), the duration of the training (in minutes) and the distance ran during it (in kilometers).

The input ends with end-of-file (EOF).

Output
For each test case, print a list of integers indicating the days in which the record was beaten. Each day must be printed in a single line. Print them in ascending order. Please notice that day 1 must always be printed.

Solution:
# -*- coding: utf-8 -*-
while True:
  try:
    contador = 0
    diasRecorde = []
    n = int(input())
    recorde = 0
    for i in range(1,n+1):
      dura, dist = map(int,input().split())
      if(dist/dura > recorde):
        recorde = dist/dura
        diasRecorde.append(i)
        contador += 1

    for i in range(contador):
      print(diasRecorde[i])
  except EOFError:
    break
 

Number 2553 - Will's Message
After an intense match of a RPG game at the house of one of his friends, young Will disappeared mysteriously! Everyone is desperately looking for him everywhere. Meanwhile, strange things are happening at your home. One of these things, however, allows you to communicate with the boy!

There are exactly 26 bulbs attached to the wall of your living room, numbered from 1 to 26 from left to right. Also, there is a letter drawn in the wall bellow each bulb. When Will wants to send you a message, he will (mysteriously) blink the bulbs corresponding to each letter of his message, one at a time. For example, if he wants to send you the message HELP, he will blink, in this order, the bulbs above the letters H, E, L and P.

Given the letter associated to each bulb and the order of the bulbs Will blinked, decipher the message he sent!

Input
The input contains several test cases. The first line of each test case contains a string with exactly 26 uppercase letters, containing all letters of the English alphabet. The first letter in the string is associated to bulb 1; the second letter in the string is associated to bulb 2; and so on. The next line contains an integer N (1 ≤ N ≤ 104), the number of bulbs that were blinked. The third line contains N integers li (1 ≤ li ≤ 26), indicating the bulbs that were blinked, in that order.

The input ends with end-of-file (EOF).

Output
For each test case, print a single line containing the message sent by Will.

Solution:
# -*- coding: utf-8 -*-

while True:
  try:
    alfabeto = input()
    numeroLetras = int(input())
    mensagem = list(map(int,input().split()))
    traducao = []

    for i in range(numeroLetras):
      print(alfabeto[mensagem[i] - 1], end = '')
    print()
  except EOFError:
    break

Number 2533 - Internship
Googlbook is a famous IT company that opened an office in your town this year! Also, Googlbook has just offered interviews to an internship position in the company!

To be interviewed, you need to send some personal information to the company, that will be used to decide who will earn the position. You sent all information they need except one: your API (Academic Performance Index). To get things worse, Student’s Portal, the system that provide your API, is not working!

Fortunately, you remember all the grades you got in all M subjects you coursed, as well their workloads. You also remember how the API is calculated:



, where N1, N2, ..., NM are your grades in each subject, and C1, C2, ..., CM are the workload of the respective subjects.

Given the grades you got and the workload of each subject, determine your API, so you can send it to Googlbook as soon as possible!

Input
The input contains several test cases. The first line of each test case contains integer M (1 ≤ M ≤ 40), the number of subjects you coursed. Each of the next M lines describe a subject. Each line contains two integers Ni and Ci (0 ≤ Ni ≤ 100, 30 ≤ Ci ≤ 120), indicating the grade you got in that subject and its workload, respectively.

The input ends with end-of-file (EOF).

Output
For each test case, print a line containing your API. Round and print it with exactly 4 decimal places.

Solution:
# -*- coding: utf-8 -*-
while True:
    try:
      qtdade = int(input())
      numerador = 0
      denominador = 0

      for _ in range(qtdade):
        nota, cargaH = map(int,input().split())
        numerador += nota*cargaH
        denominador += cargaH*100

      ira = numerador/denominador
      print("{:.4f}".format(round(ira, 4)))

    except EOFError:
      break
 
Number 2554 - Pizza Before BH
The Nlogonian Aquatic Surf Championship, to be hosted in Bonita Horeleninha (BH) city, is about to start! Before going to BH, you and your N-1 friends decided to go for a pizza, so you can relax and have some fun (and, of course, eat!).

At this moment you are choosing the date for the event. To make sure everyone can enjoy it, it was decided that the meeting is to be set in a day so that all the N people can show up at the pizzeria on that date.

Given the list of dates considered for the event and the information about which people can show up at which dates, determine if the event can happen and, if it can, its date. If more than one date is possible, the event must occur as early as possible.

Input
The input contains several test cases. The first line of each test case contains integers N and D (1 ≤ N, D ≤ 50), the number of people and the number of considered dates. People are numbered from 1 to N. Next D lines describe the considered dates. Each line begins with a date in the format day∕month∕year. The line is followed by N integers p1,p2,...,pN. The integer pi is 1 if the i-th person can show up at the considered date, or 0 otherwise. It is guaranteed that dates are always valid, and there aren’t leading zeros. Also, all dates are given in order, from the earliest to the latest day.

The input ends with end-of-file (EOF).

Output
For each test case, print one line with the date in the format day∕month∕year, exactly as it appears in the input. If it is not possible to hold the event, print “Pizza antes de FdI” (without quotes).

Solution:
# -*- coding: utf-8 -*-
numPessoas, numDatas = map(int,input().split())
disposicao = []
possivel = True

for _ in range(numDatas):
  linha = input()
  data = linha.split(' ',1)
  data = data[0]
  linha = linha.replace(data,'',1)     #retirando a data da string
  for _ in range (numPessoas):
    linha = linha.replace(' ','',1)      #retirando o espaço em branco
    if(linha[0] == '0'):
      disposicao.append(False)
    else:
      disposicao.append(True)
    linha = linha.replace(linha[0],'',1)   #retirando um booleano da string
  for i in disposicao:
    possivel *= disposicao[i]
  print(disposicao)
  if(possivel):
    break;
  else:
    possivel = True  #resetando a variável   
    del disposicao
    disposicao = []

if(possivel):
  print(data)
else:
  print('Pizza antes de FdI')


print(data)
print(linha)


